/*
** check_file.c for grimly in /home/corjon_l//rush
** 
** Made by lysandre corjon
** Login   <corjon_l@epitech.net>
** 
** Started on  Fri Mar  1 20:54:16 2013 lysandre corjon
** Last update Sat Mar  2 17:00:03 2013 lysandre corjon
*/

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include "grimly.h"

int	is_file(char *str)
{
  if (access(str, F_OK) != 0)
    return (-1);
  if (access(str, R_OK) != 0)
    return (-1);
  return (0);
}

int	tab_len(char **tab)
{
  int	i;

  i = 0;
  while (tab[i] != NULL)
    i++;
  return (i);
}

void	free_ll(t_ll *list)
{
  t_ll	*tmp;

  while (list != NULL)
    {
      tmp = list;
      list = list->next;
      free(tmp);
    }
}

t_info	**get_tall(int fd, t_info **info)
{
  int	i;
  char	*str;

  i = 0;
  if ((str = get_next_line(fd)) == NULL)
    return (NULL);
  while (str[i] != 'x')
    {
      if (str[i] < '0' || str[i] > '9')
	{
	  my_perror("MAP ERROR\n");
	  return (NULL);
	}
      i++;
    }
  (*info)->width = atoi(str);
  (*info)->height = atoi(&str[++i]);
  while (str[i])
    {
      if (str[i] < '0' || str > '9')
	{
	  my_perror("MAP ERROR\n");
	  return (NULL);
	}
  free(str);
  return (info);
}

t_ll	*feel_ll(t_ll *file, char *str)
{
  t_ll	*tmp;
  t_ll	*new;

  tmp = file;
  if (tmp == NULL)
    {
      if ((new = malloc(sizeof(*file))) == NULL)
	return (NULL);
      if ((new->data = strdup(str)) == NULL)
	return (NULL);
      new->next = NULL;
      file = new;
    }
  else
    {
      while (tmp->next != NULL)
	tmp = tmp->next;
      if ((new = malloc(sizeof(*file))) == NULL)
	return (NULL);
      if ((new->data = strdup(str)) == NULL)
	return (NULL);
      new->next = NULL;
      tmp->next = new;
    }
  return (file);
}

char	**get_file_in_tab(int fd, t_info **info)
{
  int	count;
  char	*str;
  char	**tab;
  t_ll	*file;

  count = 1;
  tab = NULL;
  file = NULL;
  if ((info = get_tall(fd, info)) == NULL)
    return (NULL);
  while ((str = get_next_line(fd)) != NULL)
    {
      if ((file = feel_ll(file, str)) == NULL)
	return (NULL);
      free(str);
      count++;
     }
  if ((tab = malloc(count * sizeof(**tab))) == NULL)
    return (NULL);
  tab[count - 1] = NULL;
  count = 0;
  while (file->next != NULL)
    {
      tab[count++] = file->data;
      file = file->next;
    }
  free_list(file);
  return (tab);
}

char	**check_file(char *str, t_info **info)
{
  char	**tab;
  int	fd;

  if (is_file(str) != 0)
    {
      my_perror("MAP ERROR\n");
      return (NULL);
    }
  if ((fd = open(str, O_RDONLY)) == -1)
    {
      my_perror("MAP ERROR\n");
      return (NULL);
    }
  if ((tab = get_file_in_tab(fd, info)) == NULL)
    return (NULL);
   if (close(fd) != 0)
    {
      my_perror("fclose error\n");
      return (NULL);
    }
  return (tab);
}
/*
** get_next_line.c for get_next_line in /home/corjon_l//projets/get_next_line
** 
** Made by lysandre corjon
** Login   <corjon_l@epitech.net>
** 
** Started on  Wed Dec 12 17:50:14 2012 lysandre corjon
** Last update Fri Mar  1 22:44:20 2013 lysandre corjon
*/

#include <unistd.h>
#include <stdlib.h>
#include "grimly.h"

int	mem_ret(char *ret[1], char *save, char *tmp, int ret_len)
{
  int	i;
  int	save_len;

  save_len = 0;
  while (save[save_len] != '\0' && save[save_len] != '\n')
    save_len += 1;
  ret[0] = malloc(sizeof(**ret) * (ret_len + save_len + 1));
  if (ret[0] == NULL)
    return (-1);
  i = 0;
  while (i < ret_len)
    {
      ret[0][i] = tmp[i];
      i += 1;
    }
  i = 0;
  while (i < save_len)
    {
      ret[0][i + ret_len] = save[i];
      i += 1;
    }
  free(tmp);
  ret[0][i + ret_len] = '\0';
  return ((save[i] == '\n'));
}

int	add_save(char *ret[1], char *save)
{
  char	*tmp;
  int	ret_len;
  int	i;

  if (save[0] == '\0')
    return (0);
  ret_len = 0;
  while (ret[0][ret_len])
    ret_len += 1;
  tmp = malloc(sizeof(*tmp) * (ret_len + 1));
  if (tmp == NULL)
    return (-1);
  i = 0;
  while (i <= ret_len)
    {
      tmp[i] = ret[0][i];
      i += 1;
    }
  free(*ret);
  return (mem_ret(ret, save, tmp, ret_len));
}

void	evolve_save(char *save)
{
  int	i;

  while (save[0] != '\0' && save[0] != '\n')
    {
      i = 0;
      while (save[i] != '\0')
	{
	  save[i] = save[i + 1];
	  i ++;
	}
    }
  i = 0;
  while (save[i] != '\0')
    {
      save[i] = save[i + 1];
      i ++;
    }
}

char		*get_next_line(const int fd)
{
  static char	save[READ_LEN + 1];
  char		*ret[1];
  int		val_ret;

  if (READ_LEN <= 0)
    return (NULL);
  ret[0] = malloc(sizeof(**ret));
  if (ret[0] == NULL)
    return (NULL);
  ret[0][0] = '\0';
  while ((val_ret = add_save(ret, save)) != 1)
    {
      if (val_ret == -1)
      	return (NULL);
      save[read(fd, save, READ_LEN)] = '\0';
      if (save[0] == '\0')
	{
	  free(ret[0]);
	  return (NULL);
	}
    }
  evolve_save(save);
  return (ret[0]);
}
/*
** grimly.c for grimly in /home/lacave_a//afs/Rush/rush2
** 
** Made by paul-auguste lacave
** Login   <lacave_a@epitech.net>
** 
** Started on  Fri Mar  1 20:44:39 2013 paul-auguste lacave
** Last update Sat Mar  2 02:48:57 2013 lysandre corjon
*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "grimly.h"

int	check_name(char *name)
{
  int	a;

  a = strlen(name);
  if (name[a-1] == 'p' && name[a-2] == 'a' && name[a-3] == 'm' && name[a-4] == '.')
    return (1);
  else
    return (0);
}

int	main(int ac, char **av)
{
  t_info	*info;

  if ((info = malloc(sizeof(*info))) == NULL)
    {
      my_perror("Malloc Fail\n");
      return (-1);
    }
  if (av[1][0] == '-' && av[1][1] == 'f')
    {

      if (check_name(av[2]) == 1)
	check_file(av[2], &info);
      else
	printf("Fail name of map !\n");
      
    }
  printf("width : %d | height : %d\n", info->width, info->height);
  return (0);
}
/*
** my_perror.c for grimly in /home/corjon_l//rush/rush
** 
** Made by lysandre corjon
** Login   <corjon_l@epitech.net>
** 
** Started on  Fri Mar  1 22:20:01 2013 lysandre corjon
** Last update Fri Mar  1 22:23:58 2013 lysandre corjon
*/

#include <string.h>

void	my_perror(char *str)
{
  write(2, str, strlen(str));
}
